{"version":3,"sources":["Components/Card/index.js","Components/CardList/index.js","Components/SearchBox/index.js","Components/Scroll/index.js","Components/ErrorBoundry/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","id","name","email","className","alt","src","CardList","contacts","cardArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredContacts","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sOAeeA,EAbF,SAACC,GAAW,IACdC,EAAmBD,EAAnBC,GAAIC,EAAeF,EAAfE,KAAMC,EAASH,EAATG,MACjB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,UAAUC,IAAG,sCAAiCL,KACvD,6BACI,4BAAKC,GACL,2BAAIC,MCmBLI,EAzBE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAOVC,EAAYD,EAASE,KAAI,SAACC,EAAMC,GAClC,OACA,kBAAC,EAAD,CACIC,IAAKL,EAASI,GAAGX,GACjBA,GAAIO,EAASI,GAAGX,GAChBC,KAAMM,EAASI,GAAGV,KAClBC,MAAOK,EAASI,GAAGT,WAK3B,OACI,6BACKM,ICPEK,EAdG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKX,UAAU,OACX,2BACIA,UAAU,kBACVY,KAAK,SACLC,YAAY,SACZC,SAAUH,MCEXI,EARA,SAACnB,GACZ,OACI,yBAAKoB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEvB,EAAMwB,WCiBJC,E,YApBX,WAAYzB,GAAO,IAAD,8BACd,4CAAMA,KACD0B,MAAQ,CACTC,UAAU,GAHA,E,+EAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACH,6CAGJG,KAAK9B,MAAMwB,a,GAjBCQ,aC6CZC,E,YAtCX,aAAe,IAAD,8BACV,+CAOJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAPzC,EAAKZ,MAAQ,CACTlB,SAAU,GACV4B,YAAa,IAJP,E,iFAYO,IAAD,OAChBG,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACvB,SAAUmC,S,+BAGvC,IAAD,OACEC,EAAmBd,KAAKJ,MAAMlB,SAASqC,QAAO,SAAArC,GAChD,OAAOA,EAASN,KAAK4C,cAAcC,SAAS,EAAKrB,MAAMU,YAAYU,kBAEvE,OAAQhB,KAAKJ,MAAMlB,SAASwC,OAGxB,yBAAK5C,UAAU,MACX,wBAAIA,UAAU,MAAd,YACA,kBAAC,EAAD,CAAWW,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU1B,SAAUoC,OAPhC,wBAAIxC,UAAU,MAAd,e,GAxBM4B,aCIEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,iB","file":"static/js/main.21550aaf.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n    const {id, name, email} = props;\n    return(\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img alt=\"Contact\" src={`https://i.pravatar.cc/200?u=${id}`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from '../Card';\n\nconst CardList = ({ contacts }) => {\n    //USED TO SHOW ERRORS DEVELOPED BY DEVELOPERS USING ERROR BOUNDRIES\n    /*if(true){\n        throw new Error('NOOOOO!');\n        \n    }*/\n    //Mapping through all data to return all Users\n    const cardArray = contacts.map((user, i) => {\n        return (\n        <Card \n            key={contacts[i].id} \n            id={contacts[i].id} \n            name={contacts[i].name} \n            email={contacts[i].email} \n\n        />)\n    })\n    //Returns cardArray \n    return (\n        <div>\n            {cardArray}\n        </div>\n    );\n}\n\nexport default CardList;\n/* CLEANER way to do the exact same thing\nconst CardList = ({ contacts }) => {\n    return (\n        <div>\n            {\n                contacts.map((user, i) => {\n                    return (\n                    <Card \n                        key={contacts[i].id} \n                        id={contacts[i].id} \n                        name={contacts[i].name} \n                        email={contacts[i].email} \n\n                    />)\n                });\n            }\n        </div>\n    );\n}*/","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input \n                className=\"pa3 ba b--green\"\n                type=\"search\" \n                placeholder=\"Search\" \n                onChange={searchChange}\n                />\n        </div>\n        \n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;\n\n\n//props.children is used to create a component which can render other components in it","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true})\n    }\n\n    render(){\n        if(this.state.hasError){\n            return <h1>Ooops.. Error</h1>\n        }\n\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport CardList from './Components/CardList';\nimport SearchBox from './Components/SearchBox';\nimport Scroll from './Components/Scroll';\nimport ErrorBoundry from './Components/ErrorBoundry'\n//import {contacts} from './contactData';\n\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            contacts: [],\n            searchfield: ''\n        }\n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value})\n    }\n    \n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response=> response.json())\n            .then(users => this.setState({contacts: users}));\n    }\n\n    render(){\n        const filteredContacts = this.state.contacts.filter(contacts => {\n            return contacts.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        })\n        return !this.state.contacts.length ?\n            <h1 className=\"tc\">Loading</h1> :\n        (\n            <div className=\"tc\">\n                <h1 className=\"f1\">Contacts</h1>\n                <SearchBox searchChange={this.onSearchChange} />\n                <Scroll>\n                    <ErrorBoundry>\n                        <CardList contacts={filteredContacts} />\n                    </ErrorBoundry>\n                </Scroll>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n    <App />\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}